# Generated by CodiumAI
from nectarchain.calibration.makers.core import CalibrationMaker
from ctapipe_io_nectarcam import np
from datetime import date


import pytest

class TestCalibrationMaker:

    # Tests that the constructor initializes the object with the correct attributes and metadata when valid input is provided
    def test_constructor_with_valid_input(self):
        pixels_id = [1, 2, 3]
        calibration_maker = CalibrationMaker(pixels_id)
    
        assert calibration_maker._pixels_id == np.array(pixels_id)
        assert calibration_maker._results[calibration_maker.PIXELS_ID_COLUMN] == np.array(pixels_id)
        assert calibration_maker._results.meta[calibration_maker.NP_PIXELS] == len(pixels_id)
        assert isinstance(calibration_maker._results.meta['comments'],str)


    # Tests that the constructor raises an error when a non-iterable pixels_id is provided
    def test_constructor_with_non_iterable_pixels_id(self):
        pixels_id = 123
        with pytest.raises(TypeError):
            CalibrationMaker(pixels_id)

    # Tests that saving the results to a non-existent path raises an error
    def test_save_to_nonexistent_path(self):
        pixels_id = [1, 2, 3]
        calibration_maker = CalibrationMaker(pixels_id)
    
        with pytest.raises(FileNotFoundError):
            calibration_maker.save("nonexistent/path")

    # Tests that saving the results to an existing file with overwrite=False raises an error
    def test_save_to_existing_file_with_overwrite_false(self, tmp_path):
        pixels_id = [1, 2, 3]
        calibration_maker = CalibrationMaker(pixels_id)
    
        # Create a temporary file
        file_path = tmp_path / "results_Calibration.ecsv"
        file_path.touch()
    
        with pytest.raises(FileExistsError):
            calibration_maker.save(file_path, overwrite=False)

    # Tests that changing the pixels_id attribute updates the results table with the expected values
    def test_change_pixels_id_attribute(self):
        pixels_id = [1, 2, 3]
        calibration_maker = CalibrationMaker(pixels_id)
    
        new_pixels_id = [4, 5, 6]
        calibration_maker._pixels_id = np.array(new_pixels_id)
    
        assert calibration_maker._pixels_id == np.array(new_pixels_id)
        assert calibration_maker._results[calibration_maker.PIXELS_ID_COLUMN] == np.array(new_pixels_id)
        assert calibration_maker._results.meta[calibration_maker.NP_PIXELS] == len(new_pixels_id)